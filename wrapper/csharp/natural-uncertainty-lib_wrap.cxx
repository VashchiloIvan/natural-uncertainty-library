/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040201
#define SWIGCSHARP

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

#if defined(__cplusplus) && __cplusplus >=201103L
# define SWIG_NULLPTR nullptr
#else
# define SWIG_NULLPTR NULL
#endif 

/* -----------------------------------------------------------------------------
 * swigcompat.swg
 *
 * Macros to provide support compatibility with older C and C++ standards.
 * ----------------------------------------------------------------------------- */

/* C99 and C++11 should provide snprintf, but define SWIG_NO_SNPRINTF
 * if you're missing it.
 */
#if ((defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L) || \
     (defined __cplusplus && __cplusplus >= 201103L) || \
     defined SWIG_HAVE_SNPRINTF) && \
    !defined SWIG_NO_SNPRINTF
# define SWIG_snprintf(O,S,F,A) snprintf(O,S,F,A)
# define SWIG_snprintf2(O,S,F,A,B) snprintf(O,S,F,A,B)
#else
/* Fallback versions ignore the buffer size, but most of our uses either have a
 * fixed maximum possible size or dynamically allocate a buffer that's large
 * enough.
 */
# define SWIG_snprintf(O,S,F,A) sprintf(O,F,A)
# define SWIG_snprintf2(O,S,F,A,B) sprintf(O,F,A,B)
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_natural_uncertainty_lib(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_natural_uncertainty_lib(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_natural_uncertainty_lib(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) do { if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } } while (0)

/* SWIG Errors applicable to all language modules, values are reserved from -1 to -99 */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#include "../../mathmodel/Alternative.h"
#include "../../mathmodel/Uncertainty.h"
#include "../../mathmodel/MathModel.h"
#include "../../criterions/Criterion.h"
#include "../../criterions/MaximinCriterion.h"
#include "../../criterions/SolveStatus.h"
#include "../../criterions/tasklog/TaskStep.h"
#include "../../criterions/OptimismPessimismCriterion.h"
#include "../../criterions/PrincipleOfInsufficientReason.h"


#include <string>


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <algorithm>
#include <stdexcept>


SWIGINTERN void SWIG_CSharpException(int code, const char *msg) {
  if (code == SWIG_ValueError) {
    SWIG_CSharpExceptionArgumentCodes exception_code = SWIG_CSharpArgumentOutOfRangeException;
    SWIG_CSharpSetPendingExceptionArgument(exception_code, msg, 0);
  } else {
    SWIG_CSharpExceptionCodes exception_code = SWIG_CSharpApplicationException;
    switch(code) {
    case SWIG_MemoryError:
      exception_code = SWIG_CSharpOutOfMemoryException;
      break;
    case SWIG_IndexError:
      exception_code = SWIG_CSharpIndexOutOfRangeException;
      break;
    case SWIG_DivisionByZero:
      exception_code = SWIG_CSharpDivideByZeroException;
      break;
    case SWIG_IOError:
      exception_code = SWIG_CSharpIOException;
      break;
    case SWIG_OverflowError:
      exception_code = SWIG_CSharpOverflowException;
      break;
    case SWIG_RuntimeError:
    case SWIG_TypeError:
    case SWIG_SyntaxError:
    case SWIG_SystemError:
    case SWIG_UnknownError:
    default:
      exception_code = SWIG_CSharpApplicationException;
      break;
    }
    SWIG_CSharpSetPendingException(exception_code, msg);
  }
}


#include <typeinfo>
#include <stdexcept>


#include <utility>


#include <map>
#include <algorithm>
#include <stdexcept>


#include <list>
#include <algorithm>
#include <stdexcept>


#include <set>
#include <algorithm>
#include <stdexcept>

SWIGINTERN std::vector< double > *new_std_vector_Sl_double_Sg___SWIG_2(int capacity){
        std::vector< double >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< double >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN double std_vector_Sl_double_Sg__getitemcopy(std::vector< double > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< double >::value_type const &std_vector_Sl_double_Sg__getitem(std::vector< double > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_double_Sg__setitem(std::vector< double > *self,int index,double const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_double_Sg__AddRange(std::vector< double > *self,std::vector< double > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< double > *std_vector_Sl_double_Sg__GetRange(std::vector< double > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< double >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_double_Sg__Insert(std::vector< double > *self,int index,double const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_double_Sg__InsertRange(std::vector< double > *self,int index,std::vector< double > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_double_Sg__RemoveAt(std::vector< double > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_double_Sg__RemoveRange(std::vector< double > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< double > *std_vector_Sl_double_Sg__Repeat(double const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< double >(count, value);
      }
SWIGINTERN void std_vector_Sl_double_Sg__Reverse__SWIG_0(std::vector< double > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_double_Sg__Reverse__SWIG_1(std::vector< double > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_double_Sg__SetRange(std::vector< double > *self,int index,std::vector< double > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_double_Sg__Contains(std::vector< double > *self,double const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_double_Sg__IndexOf(std::vector< double > *self,double const &value){
        int index = -1;
        std::vector< double >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_double_Sg__LastIndexOf(std::vector< double > *self,double const &value){
        int index = -1;
        std::vector< double >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_double_Sg__Remove(std::vector< double > *self,double const &value){
        std::vector< double >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
          return true;
        }
        return false;
      }
SWIGINTERN std::vector< std::string > *new_std_vector_Sl_std_string_Sg___SWIG_2(int capacity){
        std::vector< std::string >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< std::string >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN std::string std_vector_Sl_std_string_Sg__getitemcopy(std::vector< std::string > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< std::string >::value_type const &std_vector_Sl_std_string_Sg__getitem(std::vector< std::string > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__setitem(std::vector< std::string > *self,int index,std::string const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__AddRange(std::vector< std::string > *self,std::vector< std::string > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< std::string > *std_vector_Sl_std_string_Sg__GetRange(std::vector< std::string > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< std::string >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__Insert(std::vector< std::string > *self,int index,std::string const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__InsertRange(std::vector< std::string > *self,int index,std::vector< std::string > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__RemoveAt(std::vector< std::string > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__RemoveRange(std::vector< std::string > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< std::string > *std_vector_Sl_std_string_Sg__Repeat(std::string const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< std::string >(count, value);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__Reverse__SWIG_0(std::vector< std::string > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__Reverse__SWIG_1(std::vector< std::string > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__SetRange(std::vector< std::string > *self,int index,std::vector< std::string > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_std_string_Sg__Contains(std::vector< std::string > *self,std::string const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_std_string_Sg__IndexOf(std::vector< std::string > *self,std::string const &value){
        int index = -1;
        std::vector< std::string >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_std_string_Sg__LastIndexOf(std::vector< std::string > *self,std::string const &value){
        int index = -1;
        std::vector< std::string >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_std_string_Sg__Remove(std::vector< std::string > *self,std::string const &value){
        std::vector< std::string >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
          return true;
        }
        return false;
      }
SWIGINTERN std::vector< int > *new_std_vector_Sl_int_Sg___SWIG_2(int capacity){
        std::vector< int >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< int >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN int std_vector_Sl_int_Sg__getitemcopy(std::vector< int > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< int >::value_type const &std_vector_Sl_int_Sg__getitem(std::vector< int > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__setitem(std::vector< int > *self,int index,int const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__AddRange(std::vector< int > *self,std::vector< int > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< int > *std_vector_Sl_int_Sg__GetRange(std::vector< int > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< int >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_int_Sg__Insert(std::vector< int > *self,int index,int const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__InsertRange(std::vector< int > *self,int index,std::vector< int > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__RemoveAt(std::vector< int > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__RemoveRange(std::vector< int > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< int > *std_vector_Sl_int_Sg__Repeat(int const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< int >(count, value);
      }
SWIGINTERN void std_vector_Sl_int_Sg__Reverse__SWIG_0(std::vector< int > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_int_Sg__Reverse__SWIG_1(std::vector< int > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_int_Sg__SetRange(std::vector< int > *self,int index,std::vector< int > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_int_Sg__Contains(std::vector< int > *self,int const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_int_Sg__IndexOf(std::vector< int > *self,int const &value){
        int index = -1;
        std::vector< int >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_int_Sg__LastIndexOf(std::vector< int > *self,int const &value){
        int index = -1;
        std::vector< int >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_int_Sg__Remove(std::vector< int > *self,int const &value){
        std::vector< int >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
          return true;
        }
        return false;
      }
SWIGINTERN std::vector< TaskStep * > *new_std_vector_Sl_TaskStep_Sm__Sg___SWIG_2(int capacity){
        std::vector< TaskStep * >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< TaskStep * >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN TaskStep *std_vector_Sl_TaskStep_Sm__Sg__getitemcopy(std::vector< TaskStep * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< TaskStep * >::value_type const &std_vector_Sl_TaskStep_Sm__Sg__getitem(std::vector< TaskStep * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_TaskStep_Sm__Sg__setitem(std::vector< TaskStep * > *self,int index,TaskStep *const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_TaskStep_Sm__Sg__AddRange(std::vector< TaskStep * > *self,std::vector< TaskStep * > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< TaskStep * > *std_vector_Sl_TaskStep_Sm__Sg__GetRange(std::vector< TaskStep * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< TaskStep * >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_TaskStep_Sm__Sg__Insert(std::vector< TaskStep * > *self,int index,TaskStep *const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_TaskStep_Sm__Sg__InsertRange(std::vector< TaskStep * > *self,int index,std::vector< TaskStep * > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_TaskStep_Sm__Sg__RemoveAt(std::vector< TaskStep * > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_TaskStep_Sm__Sg__RemoveRange(std::vector< TaskStep * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< TaskStep * > *std_vector_Sl_TaskStep_Sm__Sg__Repeat(TaskStep *const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< TaskStep * >(count, value);
      }
SWIGINTERN void std_vector_Sl_TaskStep_Sm__Sg__Reverse__SWIG_0(std::vector< TaskStep * > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_TaskStep_Sm__Sg__Reverse__SWIG_1(std::vector< TaskStep * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_TaskStep_Sm__Sg__SetRange(std::vector< TaskStep * > *self,int index,std::vector< TaskStep * > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_TaskStep_Sm__Sg__Contains(std::vector< TaskStep * > *self,TaskStep *const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_TaskStep_Sm__Sg__IndexOf(std::vector< TaskStep * > *self,TaskStep *const &value){
        int index = -1;
        std::vector< TaskStep * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_TaskStep_Sm__Sg__LastIndexOf(std::vector< TaskStep * > *self,TaskStep *const &value){
        int index = -1;
        std::vector< TaskStep * >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_TaskStep_Sm__Sg__Remove(std::vector< TaskStep * > *self,TaskStep *const &value){
        std::vector< TaskStep * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
          return true;
        }
        return false;
      }
SWIGINTERN std::vector< Alternative > *new_std_vector_Sl_Alternative_Sg___SWIG_2(int capacity){
        std::vector< Alternative >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< Alternative >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN Alternative std_vector_Sl_Alternative_Sg__getitemcopy(std::vector< Alternative > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< Alternative >::value_type const &std_vector_Sl_Alternative_Sg__getitem(std::vector< Alternative > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Alternative_Sg__setitem(std::vector< Alternative > *self,int index,Alternative const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Alternative_Sg__AddRange(std::vector< Alternative > *self,std::vector< Alternative > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< Alternative > *std_vector_Sl_Alternative_Sg__GetRange(std::vector< Alternative > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< Alternative >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_Alternative_Sg__Insert(std::vector< Alternative > *self,int index,Alternative const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Alternative_Sg__InsertRange(std::vector< Alternative > *self,int index,std::vector< Alternative > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Alternative_Sg__RemoveAt(std::vector< Alternative > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Alternative_Sg__RemoveRange(std::vector< Alternative > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< Alternative > *std_vector_Sl_Alternative_Sg__Repeat(Alternative const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< Alternative >(count, value);
      }
SWIGINTERN void std_vector_Sl_Alternative_Sg__Reverse__SWIG_0(std::vector< Alternative > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_Alternative_Sg__Reverse__SWIG_1(std::vector< Alternative > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_Alternative_Sg__SetRange(std::vector< Alternative > *self,int index,std::vector< Alternative > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< Uncertainty > *new_std_vector_Sl_Uncertainty_Sg___SWIG_2(int capacity){
        std::vector< Uncertainty >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< Uncertainty >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN Uncertainty std_vector_Sl_Uncertainty_Sg__getitemcopy(std::vector< Uncertainty > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< Uncertainty >::value_type const &std_vector_Sl_Uncertainty_Sg__getitem(std::vector< Uncertainty > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Uncertainty_Sg__setitem(std::vector< Uncertainty > *self,int index,Uncertainty const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Uncertainty_Sg__AddRange(std::vector< Uncertainty > *self,std::vector< Uncertainty > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< Uncertainty > *std_vector_Sl_Uncertainty_Sg__GetRange(std::vector< Uncertainty > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< Uncertainty >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_Uncertainty_Sg__Insert(std::vector< Uncertainty > *self,int index,Uncertainty const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Uncertainty_Sg__InsertRange(std::vector< Uncertainty > *self,int index,std::vector< Uncertainty > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Uncertainty_Sg__RemoveAt(std::vector< Uncertainty > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Uncertainty_Sg__RemoveRange(std::vector< Uncertainty > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< Uncertainty > *std_vector_Sl_Uncertainty_Sg__Repeat(Uncertainty const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< Uncertainty >(count, value);
      }
SWIGINTERN void std_vector_Sl_Uncertainty_Sg__Reverse__SWIG_0(std::vector< Uncertainty > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_Uncertainty_Sg__Reverse__SWIG_1(std::vector< Uncertainty > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_Uncertainty_Sg__SetRange(std::vector< Uncertainty > *self,int index,std::vector< Uncertainty > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void * SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_new_Alternative(const char * jarg1, void * jarg2) {
  void * jresult ;
  std::string arg1 ;
  std::vector< double > arg2 ;
  std::vector< double > *argp2 ;
  Alternative *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  argp2 = (std::vector< double > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::vector< double >", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (Alternative *)new Alternative(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_Alternative_getName(void * jarg1) {
  const char * jresult ;
  Alternative *arg1 = (Alternative *) 0 ;
  std::string result;
  
  arg1 = (Alternative *)jarg1; 
  result = ((Alternative const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_Alternative_getMarks(void * jarg1) {
  void * jresult ;
  Alternative *arg1 = (Alternative *) 0 ;
  std::vector< double > result;
  
  arg1 = (Alternative *)jarg1; 
  result = (arg1)->getMarks();
  jresult = new std::vector< double >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_Alternative_setMarks(void * jarg1, void * jarg2) {
  Alternative *arg1 = (Alternative *) 0 ;
  std::vector< double > arg2 ;
  std::vector< double > *argp2 ;
  
  arg1 = (Alternative *)jarg1; 
  argp2 = (std::vector< double > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::vector< double >", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setMarks(arg2);
}


SWIGEXPORT double SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_Alternative_minMark(void * jarg1) {
  double jresult ;
  Alternative *arg1 = (Alternative *) 0 ;
  double result;
  
  arg1 = (Alternative *)jarg1; 
  result = (double)(arg1)->minMark();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_Alternative_maxMark(void * jarg1) {
  double jresult ;
  Alternative *arg1 = (Alternative *) 0 ;
  double result;
  
  arg1 = (Alternative *)jarg1; 
  result = (double)(arg1)->maxMark();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_Alternative_sumOfMarks(void * jarg1) {
  double jresult ;
  Alternative *arg1 = (Alternative *) 0 ;
  double result;
  
  arg1 = (Alternative *)jarg1; 
  result = (double)(arg1)->sumOfMarks();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_Alternative_avgOfMarks(void * jarg1) {
  double jresult ;
  Alternative *arg1 = (Alternative *) 0 ;
  double result;
  
  arg1 = (Alternative *)jarg1; 
  result = (double)(arg1)->avgOfMarks();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_delete_Alternative(void * jarg1) {
  Alternative *arg1 = (Alternative *) 0 ;
  
  arg1 = (Alternative *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_new_Uncertainty(const char * jarg1) {
  void * jresult ;
  std::string arg1 ;
  Uncertainty *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  result = (Uncertainty *)new Uncertainty(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_Uncertainty_getName(void * jarg1) {
  const char * jresult ;
  Uncertainty *arg1 = (Uncertainty *) 0 ;
  std::string result;
  
  arg1 = (Uncertainty *)jarg1; 
  result = ((Uncertainty const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_delete_Uncertainty(void * jarg1) {
  Uncertainty *arg1 = (Uncertainty *) 0 ;
  
  arg1 = (Uncertainty *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_new_MathModel__SWIG_0() {
  void * jresult ;
  MathModel *result = 0 ;
  
  result = (MathModel *)new MathModel();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_new_MathModel__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  std::vector< Alternative > arg1 ;
  std::vector< Uncertainty > arg2 ;
  std::vector< Alternative > *argp1 ;
  std::vector< Uncertainty > *argp2 ;
  MathModel *result = 0 ;
  
  argp1 = (std::vector< Alternative > *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::vector< Alternative >", 0);
    return 0;
  }
  arg1 = *argp1; 
  argp2 = (std::vector< Uncertainty > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::vector< Uncertainty >", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (MathModel *)new MathModel(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_new_MathModel__SWIG_2(void * jarg1) {
  void * jresult ;
  MathModel *arg1 = 0 ;
  MathModel *result = 0 ;
  
  arg1 = (MathModel *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MathModel const & is null", 0);
    return 0;
  } 
  result = (MathModel *)new MathModel((MathModel const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_MathModel_setAlternatives(void * jarg1, void * jarg2) {
  MathModel *arg1 = (MathModel *) 0 ;
  std::vector< Alternative > arg2 ;
  std::vector< Alternative > *argp2 ;
  
  arg1 = (MathModel *)jarg1; 
  argp2 = (std::vector< Alternative > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::vector< Alternative >", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setAlternatives(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_MathModel_setUncertainties(void * jarg1, void * jarg2) {
  MathModel *arg1 = (MathModel *) 0 ;
  std::vector< Uncertainty > arg2 ;
  std::vector< Uncertainty > *argp2 ;
  
  arg1 = (MathModel *)jarg1; 
  argp2 = (std::vector< Uncertainty > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::vector< Uncertainty >", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setUncertainties(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_MathModel_getAlternatives(void * jarg1) {
  void * jresult ;
  MathModel *arg1 = (MathModel *) 0 ;
  std::vector< Alternative > result;
  
  arg1 = (MathModel *)jarg1; 
  result = (arg1)->getAlternatives();
  jresult = new std::vector< Alternative >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_MathModel_getUncertainties(void * jarg1) {
  void * jresult ;
  MathModel *arg1 = (MathModel *) 0 ;
  std::vector< Uncertainty > result;
  
  arg1 = (MathModel *)jarg1; 
  result = (arg1)->getUncertainties();
  jresult = new std::vector< Uncertainty >(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_MathModel_isValid(void * jarg1) {
  unsigned int jresult ;
  MathModel *arg1 = (MathModel *) 0 ;
  bool result;
  
  arg1 = (MathModel *)jarg1; 
  result = (bool)(arg1)->isValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_delete_MathModel(void * jarg1) {
  MathModel *arg1 = (MathModel *) 0 ;
  
  arg1 = (MathModel *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_Criterion_withLoggingProcess(void * jarg1) {
  Criterion *arg1 = (Criterion *) 0 ;
  
  arg1 = (Criterion *)jarg1; 
  (arg1)->withLoggingProcess();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_Criterion_getProcess(void * jarg1) {
  void * jresult ;
  Criterion *arg1 = (Criterion *) 0 ;
  std::vector< TaskStep * > result;
  
  arg1 = (Criterion *)jarg1; 
  result = (arg1)->getProcess();
  jresult = new std::vector< TaskStep * >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_Criterion_solve(void * jarg1) {
  void * jresult ;
  Criterion *arg1 = (Criterion *) 0 ;
  SolveStatus result;
  
  arg1 = (Criterion *)jarg1; 
  result = (arg1)->solve();
  jresult = new SolveStatus(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_delete_Criterion(void * jarg1) {
  Criterion *arg1 = (Criterion *) 0 ;
  
  arg1 = (Criterion *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_new_MaximinCriterion(void * jarg1) {
  void * jresult ;
  MathModel arg1 ;
  MathModel *argp1 ;
  MaximinCriterion *result = 0 ;
  
  argp1 = (MathModel *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null MathModel", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (MaximinCriterion *)new MaximinCriterion(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_MaximinCriterion_solve(void * jarg1) {
  void * jresult ;
  MaximinCriterion *arg1 = (MaximinCriterion *) 0 ;
  SolveStatus result;
  
  arg1 = (MaximinCriterion *)jarg1; 
  result = (arg1)->solve();
  jresult = new SolveStatus(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_delete_MaximinCriterion(void * jarg1) {
  MaximinCriterion *arg1 = (MaximinCriterion *) 0 ;
  
  arg1 = (MaximinCriterion *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_SolveStatus_OptimalDecisionResult(void * jarg1) {
  void * jresult ;
  std::vector< int > arg1 ;
  std::vector< int > *argp1 ;
  SolveStatus result;
  
  argp1 = (std::vector< int > *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::vector< int >", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = SolveStatus::OptimalDecisionResult(SWIG_STD_MOVE(arg1));
  jresult = new SolveStatus(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_SolveStatus_FailedResult() {
  void * jresult ;
  SolveStatus result;
  
  result = SolveStatus::FailedResult();
  jresult = new SolveStatus(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_SolveStatus_InvalidModelResult() {
  void * jresult ;
  SolveStatus result;
  
  result = SolveStatus::InvalidModelResult();
  jresult = new SolveStatus(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_SolveStatus_InvalidParameterResult() {
  void * jresult ;
  SolveStatus result;
  
  result = SolveStatus::InvalidParameterResult();
  jresult = new SolveStatus(result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_SolveStatus_getStatus(void * jarg1) {
  int jresult ;
  SolveStatus *arg1 = (SolveStatus *) 0 ;
  Status result;
  
  arg1 = (SolveStatus *)jarg1; 
  result = (Status)(arg1)->getStatus();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_SolveStatus_getBestAlternatives(void * jarg1) {
  void * jresult ;
  SolveStatus *arg1 = (SolveStatus *) 0 ;
  std::vector< int > result;
  
  arg1 = (SolveStatus *)jarg1; 
  result = (arg1)->getBestAlternatives();
  jresult = new std::vector< int >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_new_SolveStatus() {
  void * jresult ;
  SolveStatus *result = 0 ;
  
  result = (SolveStatus *)new SolveStatus();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_delete_SolveStatus(void * jarg1) {
  SolveStatus *arg1 = (SolveStatus *) 0 ;
  
  arg1 = (SolveStatus *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_new_TaskStep__SWIG_0(const char * jarg1, const char * jarg2) {
  void * jresult ;
  std::string arg1 ;
  std::string arg2 ;
  TaskStep *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = (TaskStep *)new TaskStep(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_new_TaskStep__SWIG_1(const char * jarg1, void * jarg2) {
  void * jresult ;
  std::string arg1 ;
  std::vector< std::string > arg2 ;
  std::vector< std::string > *argp2 ;
  TaskStep *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  argp2 = (std::vector< std::string > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::vector< std::string >", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (TaskStep *)new TaskStep(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_TaskStep_TextType(const char * jarg1) {
  void * jresult ;
  std::string arg1 ;
  TaskStep *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  result = (TaskStep *)TaskStep::TextType(SWIG_STD_MOVE(arg1));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_TaskStep_TablePartType(const char * jarg1, void * jarg2) {
  void * jresult ;
  std::string arg1 ;
  std::vector< std::string > arg2 ;
  std::vector< std::string > *argp2 ;
  TaskStep *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  argp2 = (std::vector< std::string > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::vector< std::string >", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (TaskStep *)TaskStep::TablePartType(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_TaskStep_EndTableType() {
  void * jresult ;
  TaskStep *result = 0 ;
  
  result = (TaskStep *)TaskStep::EndTableType();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_TaskStep_StepType(void * jarg1) {
  const char * jresult ;
  TaskStep *arg1 = (TaskStep *) 0 ;
  std::string result;
  
  arg1 = (TaskStep *)jarg1; 
  result = (arg1)->StepType();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_TaskStep_AsString(void * jarg1) {
  const char * jresult ;
  TaskStep *arg1 = (TaskStep *) 0 ;
  std::string result;
  
  arg1 = (TaskStep *)jarg1; 
  result = (arg1)->AsString();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_delete_TaskStep(void * jarg1) {
  TaskStep *arg1 = (TaskStep *) 0 ;
  
  arg1 = (TaskStep *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_new_OptimismPessimismCriterion(void * jarg1, double jarg2) {
  void * jresult ;
  MathModel arg1 ;
  double arg2 ;
  MathModel *argp1 ;
  OptimismPessimismCriterion *result = 0 ;
  
  argp1 = (MathModel *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null MathModel", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (double)jarg2; 
  result = (OptimismPessimismCriterion *)new OptimismPessimismCriterion(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_OptimismPessimismCriterion_solve(void * jarg1) {
  void * jresult ;
  OptimismPessimismCriterion *arg1 = (OptimismPessimismCriterion *) 0 ;
  SolveStatus result;
  
  arg1 = (OptimismPessimismCriterion *)jarg1; 
  result = (arg1)->solve();
  jresult = new SolveStatus(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_delete_OptimismPessimismCriterion(void * jarg1) {
  OptimismPessimismCriterion *arg1 = (OptimismPessimismCriterion *) 0 ;
  
  arg1 = (OptimismPessimismCriterion *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_new_PrincipleOfInsufficientReason(void * jarg1) {
  void * jresult ;
  MathModel arg1 ;
  MathModel *argp1 ;
  PrincipleOfInsufficientReason *result = 0 ;
  
  argp1 = (MathModel *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null MathModel", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (PrincipleOfInsufficientReason *)new PrincipleOfInsufficientReason(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_PrincipleOfInsufficientReason_solve(void * jarg1) {
  void * jresult ;
  PrincipleOfInsufficientReason *arg1 = (PrincipleOfInsufficientReason *) 0 ;
  SolveStatus result;
  
  arg1 = (PrincipleOfInsufficientReason *)jarg1; 
  result = (arg1)->solve();
  jresult = new SolveStatus(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_delete_PrincipleOfInsufficientReason(void * jarg1) {
  PrincipleOfInsufficientReason *arg1 = (PrincipleOfInsufficientReason *) 0 ;
  
  arg1 = (PrincipleOfInsufficientReason *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_new_DoubleList__SWIG_0() {
  void * jresult ;
  std::vector< double > *result = 0 ;
  
  result = (std::vector< double > *)new std::vector< double >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_new_DoubleList__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< double > *arg1 = 0 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (std::vector< double > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return 0;
  } 
  result = (std::vector< double > *)new std::vector< double >((std::vector< double > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_DoubleList_Clear(void * jarg1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_DoubleList_Add(void * jarg1, double jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((double const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_DoubleList_size(void * jarg1) {
  unsigned int jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type result;
  
  arg1 = (std::vector< double > *)jarg1; 
  result = ((std::vector< double > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_DoubleList_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  bool result;
  
  arg1 = (std::vector< double > *)jarg1; 
  result = (bool)((std::vector< double > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_DoubleList_capacity(void * jarg1) {
  unsigned int jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type result;
  
  arg1 = (std::vector< double > *)jarg1; 
  result = ((std::vector< double > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_DoubleList_reserve(void * jarg1, unsigned int jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (std::vector< double >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_new_DoubleList__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< double > *)new_std_vector_Sl_double_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_DoubleList_getitemcopy(void * jarg1, int jarg2) {
  double jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  double result;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (double)std_vector_Sl_double_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_DoubleList_getitem(void * jarg1, int jarg2) {
  double jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double >::value_type *result = 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< double >::value_type *) &std_vector_Sl_double_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_DoubleList_setitem(void * jarg1, int jarg2, double jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (double)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_double_Sg__setitem(arg1,arg2,(double const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_DoubleList_AddRange(void * jarg1, void * jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double > *arg2 = 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return ;
  } 
  std_vector_Sl_double_Sg__AddRange(arg1,(std::vector< double > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_DoubleList_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< double > *)std_vector_Sl_double_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_DoubleList_Insert(void * jarg1, int jarg2, double jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (double)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_double_Sg__Insert(arg1,arg2,(double const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_DoubleList_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double > *arg3 = 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< double > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_double_Sg__InsertRange(arg1,arg2,(std::vector< double > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_DoubleList_RemoveAt(void * jarg1, int jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_double_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_DoubleList_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_double_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_DoubleList_Repeat(double jarg1, int jarg2) {
  void * jresult ;
  double *arg1 = 0 ;
  int arg2 ;
  double temp1 ;
  std::vector< double > *result = 0 ;
  
  temp1 = (double)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< double > *)std_vector_Sl_double_Sg__Repeat((double const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_DoubleList_Reverse__SWIG_0(void * jarg1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  std_vector_Sl_double_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_DoubleList_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_double_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_DoubleList_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double > *arg3 = 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< double > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_double_Sg__SetRange(arg1,arg2,(std::vector< double > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_DoubleList_Contains(void * jarg1, double jarg2) {
  unsigned int jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  bool result;
  
  arg1 = (std::vector< double > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_double_Sg__Contains(arg1,(double const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_DoubleList_IndexOf(void * jarg1, double jarg2) {
  int jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  int result;
  
  arg1 = (std::vector< double > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_double_Sg__IndexOf(arg1,(double const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_DoubleList_LastIndexOf(void * jarg1, double jarg2) {
  int jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  int result;
  
  arg1 = (std::vector< double > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_double_Sg__LastIndexOf(arg1,(double const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_DoubleList_Remove(void * jarg1, double jarg2) {
  unsigned int jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  bool result;
  
  arg1 = (std::vector< double > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_double_Sg__Remove(arg1,(double const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_delete_DoubleList(void * jarg1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_new_StringList__SWIG_0() {
  void * jresult ;
  std::vector< std::string > *result = 0 ;
  
  result = (std::vector< std::string > *)new std::vector< std::string >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_new_StringList__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< std::string > *arg1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & is null", 0);
    return 0;
  } 
  result = (std::vector< std::string > *)new std::vector< std::string >((std::vector< std::string > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_StringList_Clear(void * jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_StringList_Add(void * jarg1, const char * jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->push_back((std::string const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_StringList_size(void * jarg1) {
  unsigned int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  result = ((std::vector< std::string > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_StringList_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  bool result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  result = (bool)((std::vector< std::string > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_StringList_capacity(void * jarg1) {
  unsigned int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  result = ((std::vector< std::string > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_StringList_reserve(void * jarg1, unsigned int jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (std::vector< std::string >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_new_StringList__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< std::string > *)new_std_vector_Sl_std_string_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_StringList_getitemcopy(void * jarg1, int jarg2) {
  const char * jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_std_string_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_StringList_getitem(void * jarg1, int jarg2) {
  const char * jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_StringList_setitem(void * jarg1, int jarg2, const char * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  try {
    std_vector_Sl_std_string_Sg__setitem(arg1,arg2,(std::string const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_StringList_AddRange(void * jarg1, void * jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & is null", 0);
    return ;
  } 
  std_vector_Sl_std_string_Sg__AddRange(arg1,(std::vector< std::string > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_StringList_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< std::string > *)std_vector_Sl_std_string_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_StringList_Insert(void * jarg1, int jarg2, const char * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  try {
    std_vector_Sl_std_string_Sg__Insert(arg1,arg2,(std::string const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_StringList_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string > *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::string > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_string_Sg__InsertRange(arg1,arg2,(std::vector< std::string > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_StringList_RemoveAt(void * jarg1, int jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_std_string_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_StringList_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_string_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_StringList_Repeat(const char * jarg1, int jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  int arg2 ;
  std::vector< std::string > *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::string > *)std_vector_Sl_std_string_Sg__Repeat((std::string const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_StringList_Reverse__SWIG_0(void * jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  std_vector_Sl_std_string_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_StringList_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_string_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_StringList_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string > *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::string > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_string_Sg__SetRange(arg1,arg2,(std::vector< std::string > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_StringList_Contains(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)std_vector_Sl_std_string_Sg__Contains(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_StringList_IndexOf(void * jarg1, const char * jarg2) {
  int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int)std_vector_Sl_std_string_Sg__IndexOf(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_StringList_LastIndexOf(void * jarg1, const char * jarg2) {
  int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int)std_vector_Sl_std_string_Sg__LastIndexOf(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_StringList_Remove(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)std_vector_Sl_std_string_Sg__Remove(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_delete_StringList(void * jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_new_IntList__SWIG_0() {
  void * jresult ;
  std::vector< int > *result = 0 ;
  
  result = (std::vector< int > *)new std::vector< int >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_new_IntList__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< int > *arg1 = 0 ;
  std::vector< int > *result = 0 ;
  
  arg1 = (std::vector< int > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & is null", 0);
    return 0;
  } 
  result = (std::vector< int > *)new std::vector< int >((std::vector< int > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_IntList_Clear(void * jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_IntList_Add(void * jarg1, int jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((int const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_IntList_size(void * jarg1) {
  unsigned int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  arg1 = (std::vector< int > *)jarg1; 
  result = ((std::vector< int > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_IntList_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  bool result;
  
  arg1 = (std::vector< int > *)jarg1; 
  result = (bool)((std::vector< int > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_IntList_capacity(void * jarg1) {
  unsigned int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  arg1 = (std::vector< int > *)jarg1; 
  result = ((std::vector< int > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_IntList_reserve(void * jarg1, unsigned int jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (std::vector< int >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_new_IntList__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< int > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< int > *)new_std_vector_Sl_int_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_IntList_getitemcopy(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (int)std_vector_Sl_int_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_IntList_getitem(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int >::value_type *result = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< int >::value_type *) &std_vector_Sl_int_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_IntList_setitem(void * jarg1, int jarg2, int jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_int_Sg__setitem(arg1,arg2,(int const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_IntList_AddRange(void * jarg1, void * jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & is null", 0);
    return ;
  } 
  std_vector_Sl_int_Sg__AddRange(arg1,(std::vector< int > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_IntList_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< int > *result = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< int > *)std_vector_Sl_int_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_IntList_Insert(void * jarg1, int jarg2, int jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_int_Sg__Insert(arg1,arg2,(int const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_IntList_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int > *arg3 = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_int_Sg__InsertRange(arg1,arg2,(std::vector< int > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_IntList_RemoveAt(void * jarg1, int jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_int_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_IntList_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_int_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_IntList_Repeat(int jarg1, int jarg2) {
  void * jresult ;
  int *arg1 = 0 ;
  int arg2 ;
  int temp1 ;
  std::vector< int > *result = 0 ;
  
  temp1 = (int)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< int > *)std_vector_Sl_int_Sg__Repeat((int const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_IntList_Reverse__SWIG_0(void * jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  std_vector_Sl_int_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_IntList_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_int_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_IntList_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int > *arg3 = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_int_Sg__SetRange(arg1,arg2,(std::vector< int > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_IntList_Contains(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  bool result;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_int_Sg__Contains(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_IntList_IndexOf(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  int result;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_int_Sg__IndexOf(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_IntList_LastIndexOf(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  int result;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_int_Sg__LastIndexOf(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_IntList_Remove(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  bool result;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_int_Sg__Remove(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_delete_IntList(void * jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_new_TaskProcess__SWIG_0() {
  void * jresult ;
  std::vector< TaskStep * > *result = 0 ;
  
  result = (std::vector< TaskStep * > *)new std::vector< TaskStep * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_new_TaskProcess__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< TaskStep * > *arg1 = 0 ;
  std::vector< TaskStep * > *result = 0 ;
  
  arg1 = (std::vector< TaskStep * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< TaskStep * > const & is null", 0);
    return 0;
  } 
  result = (std::vector< TaskStep * > *)new std::vector< TaskStep * >((std::vector< TaskStep * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_TaskProcess_Clear(void * jarg1) {
  std::vector< TaskStep * > *arg1 = (std::vector< TaskStep * > *) 0 ;
  
  arg1 = (std::vector< TaskStep * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_TaskProcess_Add(void * jarg1, void * jarg2) {
  std::vector< TaskStep * > *arg1 = (std::vector< TaskStep * > *) 0 ;
  TaskStep **arg2 = 0 ;
  TaskStep *temp2 = 0 ;
  
  arg1 = (std::vector< TaskStep * > *)jarg1; 
  temp2 = (TaskStep *)jarg2;
  arg2 = (TaskStep **)&temp2; 
  (arg1)->push_back((TaskStep *const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_TaskProcess_size(void * jarg1) {
  unsigned int jresult ;
  std::vector< TaskStep * > *arg1 = (std::vector< TaskStep * > *) 0 ;
  std::vector< TaskStep * >::size_type result;
  
  arg1 = (std::vector< TaskStep * > *)jarg1; 
  result = ((std::vector< TaskStep * > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_TaskProcess_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< TaskStep * > *arg1 = (std::vector< TaskStep * > *) 0 ;
  bool result;
  
  arg1 = (std::vector< TaskStep * > *)jarg1; 
  result = (bool)((std::vector< TaskStep * > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_TaskProcess_capacity(void * jarg1) {
  unsigned int jresult ;
  std::vector< TaskStep * > *arg1 = (std::vector< TaskStep * > *) 0 ;
  std::vector< TaskStep * >::size_type result;
  
  arg1 = (std::vector< TaskStep * > *)jarg1; 
  result = ((std::vector< TaskStep * > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_TaskProcess_reserve(void * jarg1, unsigned int jarg2) {
  std::vector< TaskStep * > *arg1 = (std::vector< TaskStep * > *) 0 ;
  std::vector< TaskStep * >::size_type arg2 ;
  
  arg1 = (std::vector< TaskStep * > *)jarg1; 
  arg2 = (std::vector< TaskStep * >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_new_TaskProcess__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< TaskStep * > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< TaskStep * > *)new_std_vector_Sl_TaskStep_Sm__Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_TaskProcess_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< TaskStep * > *arg1 = (std::vector< TaskStep * > *) 0 ;
  int arg2 ;
  TaskStep *result = 0 ;
  
  arg1 = (std::vector< TaskStep * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (TaskStep *)std_vector_Sl_TaskStep_Sm__Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_TaskProcess_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< TaskStep * > *arg1 = (std::vector< TaskStep * > *) 0 ;
  int arg2 ;
  std::vector< TaskStep * >::value_type *result = 0 ;
  
  arg1 = (std::vector< TaskStep * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< TaskStep * >::value_type *) &std_vector_Sl_TaskStep_Sm__Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_TaskProcess_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< TaskStep * > *arg1 = (std::vector< TaskStep * > *) 0 ;
  int arg2 ;
  TaskStep **arg3 = 0 ;
  TaskStep *temp3 = 0 ;
  
  arg1 = (std::vector< TaskStep * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (TaskStep *)jarg3;
  arg3 = (TaskStep **)&temp3; 
  try {
    std_vector_Sl_TaskStep_Sm__Sg__setitem(arg1,arg2,(TaskStep *const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_TaskProcess_AddRange(void * jarg1, void * jarg2) {
  std::vector< TaskStep * > *arg1 = (std::vector< TaskStep * > *) 0 ;
  std::vector< TaskStep * > *arg2 = 0 ;
  
  arg1 = (std::vector< TaskStep * > *)jarg1; 
  arg2 = (std::vector< TaskStep * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< TaskStep * > const & is null", 0);
    return ;
  } 
  std_vector_Sl_TaskStep_Sm__Sg__AddRange(arg1,(std::vector< TaskStep * > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_TaskProcess_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< TaskStep * > *arg1 = (std::vector< TaskStep * > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< TaskStep * > *result = 0 ;
  
  arg1 = (std::vector< TaskStep * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< TaskStep * > *)std_vector_Sl_TaskStep_Sm__Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_TaskProcess_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< TaskStep * > *arg1 = (std::vector< TaskStep * > *) 0 ;
  int arg2 ;
  TaskStep **arg3 = 0 ;
  TaskStep *temp3 = 0 ;
  
  arg1 = (std::vector< TaskStep * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (TaskStep *)jarg3;
  arg3 = (TaskStep **)&temp3; 
  try {
    std_vector_Sl_TaskStep_Sm__Sg__Insert(arg1,arg2,(TaskStep *const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_TaskProcess_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< TaskStep * > *arg1 = (std::vector< TaskStep * > *) 0 ;
  int arg2 ;
  std::vector< TaskStep * > *arg3 = 0 ;
  
  arg1 = (std::vector< TaskStep * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< TaskStep * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< TaskStep * > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_TaskStep_Sm__Sg__InsertRange(arg1,arg2,(std::vector< TaskStep * > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_TaskProcess_RemoveAt(void * jarg1, int jarg2) {
  std::vector< TaskStep * > *arg1 = (std::vector< TaskStep * > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< TaskStep * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_TaskStep_Sm__Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_TaskProcess_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< TaskStep * > *arg1 = (std::vector< TaskStep * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< TaskStep * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_TaskStep_Sm__Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_TaskProcess_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  TaskStep **arg1 = 0 ;
  int arg2 ;
  TaskStep *temp1 = 0 ;
  std::vector< TaskStep * > *result = 0 ;
  
  temp1 = (TaskStep *)jarg1;
  arg1 = (TaskStep **)&temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< TaskStep * > *)std_vector_Sl_TaskStep_Sm__Sg__Repeat((TaskStep *const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_TaskProcess_Reverse__SWIG_0(void * jarg1) {
  std::vector< TaskStep * > *arg1 = (std::vector< TaskStep * > *) 0 ;
  
  arg1 = (std::vector< TaskStep * > *)jarg1; 
  std_vector_Sl_TaskStep_Sm__Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_TaskProcess_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< TaskStep * > *arg1 = (std::vector< TaskStep * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< TaskStep * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_TaskStep_Sm__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_TaskProcess_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< TaskStep * > *arg1 = (std::vector< TaskStep * > *) 0 ;
  int arg2 ;
  std::vector< TaskStep * > *arg3 = 0 ;
  
  arg1 = (std::vector< TaskStep * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< TaskStep * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< TaskStep * > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_TaskStep_Sm__Sg__SetRange(arg1,arg2,(std::vector< TaskStep * > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_TaskProcess_Contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< TaskStep * > *arg1 = (std::vector< TaskStep * > *) 0 ;
  TaskStep **arg2 = 0 ;
  TaskStep *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< TaskStep * > *)jarg1; 
  temp2 = (TaskStep *)jarg2;
  arg2 = (TaskStep **)&temp2; 
  result = (bool)std_vector_Sl_TaskStep_Sm__Sg__Contains(arg1,(TaskStep *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_TaskProcess_IndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< TaskStep * > *arg1 = (std::vector< TaskStep * > *) 0 ;
  TaskStep **arg2 = 0 ;
  TaskStep *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< TaskStep * > *)jarg1; 
  temp2 = (TaskStep *)jarg2;
  arg2 = (TaskStep **)&temp2; 
  result = (int)std_vector_Sl_TaskStep_Sm__Sg__IndexOf(arg1,(TaskStep *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_TaskProcess_LastIndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< TaskStep * > *arg1 = (std::vector< TaskStep * > *) 0 ;
  TaskStep **arg2 = 0 ;
  TaskStep *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< TaskStep * > *)jarg1; 
  temp2 = (TaskStep *)jarg2;
  arg2 = (TaskStep **)&temp2; 
  result = (int)std_vector_Sl_TaskStep_Sm__Sg__LastIndexOf(arg1,(TaskStep *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_TaskProcess_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< TaskStep * > *arg1 = (std::vector< TaskStep * > *) 0 ;
  TaskStep **arg2 = 0 ;
  TaskStep *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< TaskStep * > *)jarg1; 
  temp2 = (TaskStep *)jarg2;
  arg2 = (TaskStep **)&temp2; 
  result = (bool)std_vector_Sl_TaskStep_Sm__Sg__Remove(arg1,(TaskStep *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_delete_TaskProcess(void * jarg1) {
  std::vector< TaskStep * > *arg1 = (std::vector< TaskStep * > *) 0 ;
  
  arg1 = (std::vector< TaskStep * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_new_AlternativeList__SWIG_0() {
  void * jresult ;
  std::vector< Alternative > *result = 0 ;
  
  result = (std::vector< Alternative > *)new std::vector< Alternative >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_new_AlternativeList__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< Alternative > *arg1 = 0 ;
  std::vector< Alternative > *result = 0 ;
  
  arg1 = (std::vector< Alternative > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Alternative > const & is null", 0);
    return 0;
  } 
  result = (std::vector< Alternative > *)new std::vector< Alternative >((std::vector< Alternative > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_AlternativeList_Clear(void * jarg1) {
  std::vector< Alternative > *arg1 = (std::vector< Alternative > *) 0 ;
  
  arg1 = (std::vector< Alternative > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_AlternativeList_Add(void * jarg1, void * jarg2) {
  std::vector< Alternative > *arg1 = (std::vector< Alternative > *) 0 ;
  Alternative *arg2 = 0 ;
  
  arg1 = (std::vector< Alternative > *)jarg1; 
  arg2 = (Alternative *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Alternative const & is null", 0);
    return ;
  } 
  (arg1)->push_back((Alternative const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_AlternativeList_size(void * jarg1) {
  unsigned int jresult ;
  std::vector< Alternative > *arg1 = (std::vector< Alternative > *) 0 ;
  std::vector< Alternative >::size_type result;
  
  arg1 = (std::vector< Alternative > *)jarg1; 
  result = ((std::vector< Alternative > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_AlternativeList_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< Alternative > *arg1 = (std::vector< Alternative > *) 0 ;
  bool result;
  
  arg1 = (std::vector< Alternative > *)jarg1; 
  result = (bool)((std::vector< Alternative > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_AlternativeList_capacity(void * jarg1) {
  unsigned int jresult ;
  std::vector< Alternative > *arg1 = (std::vector< Alternative > *) 0 ;
  std::vector< Alternative >::size_type result;
  
  arg1 = (std::vector< Alternative > *)jarg1; 
  result = ((std::vector< Alternative > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_AlternativeList_reserve(void * jarg1, unsigned int jarg2) {
  std::vector< Alternative > *arg1 = (std::vector< Alternative > *) 0 ;
  std::vector< Alternative >::size_type arg2 ;
  
  arg1 = (std::vector< Alternative > *)jarg1; 
  arg2 = (std::vector< Alternative >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_new_AlternativeList__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< Alternative > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< Alternative > *)new_std_vector_Sl_Alternative_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_AlternativeList_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< Alternative > *arg1 = (std::vector< Alternative > *) 0 ;
  int arg2 ;
  SwigValueWrapper< Alternative > result;
  
  arg1 = (std::vector< Alternative > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_Alternative_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new Alternative(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_AlternativeList_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< Alternative > *arg1 = (std::vector< Alternative > *) 0 ;
  int arg2 ;
  std::vector< Alternative >::value_type *result = 0 ;
  
  arg1 = (std::vector< Alternative > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< Alternative >::value_type *) &std_vector_Sl_Alternative_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_AlternativeList_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Alternative > *arg1 = (std::vector< Alternative > *) 0 ;
  int arg2 ;
  Alternative *arg3 = 0 ;
  
  arg1 = (std::vector< Alternative > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Alternative *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Alternative const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Alternative_Sg__setitem(arg1,arg2,(Alternative const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_AlternativeList_AddRange(void * jarg1, void * jarg2) {
  std::vector< Alternative > *arg1 = (std::vector< Alternative > *) 0 ;
  std::vector< Alternative > *arg2 = 0 ;
  
  arg1 = (std::vector< Alternative > *)jarg1; 
  arg2 = (std::vector< Alternative > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Alternative > const & is null", 0);
    return ;
  } 
  std_vector_Sl_Alternative_Sg__AddRange(arg1,(std::vector< Alternative > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_AlternativeList_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< Alternative > *arg1 = (std::vector< Alternative > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< Alternative > *result = 0 ;
  
  arg1 = (std::vector< Alternative > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< Alternative > *)std_vector_Sl_Alternative_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_AlternativeList_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Alternative > *arg1 = (std::vector< Alternative > *) 0 ;
  int arg2 ;
  Alternative *arg3 = 0 ;
  
  arg1 = (std::vector< Alternative > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Alternative *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Alternative const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Alternative_Sg__Insert(arg1,arg2,(Alternative const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_AlternativeList_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Alternative > *arg1 = (std::vector< Alternative > *) 0 ;
  int arg2 ;
  std::vector< Alternative > *arg3 = 0 ;
  
  arg1 = (std::vector< Alternative > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< Alternative > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Alternative > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Alternative_Sg__InsertRange(arg1,arg2,(std::vector< Alternative > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_AlternativeList_RemoveAt(void * jarg1, int jarg2) {
  std::vector< Alternative > *arg1 = (std::vector< Alternative > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< Alternative > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_Alternative_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_AlternativeList_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< Alternative > *arg1 = (std::vector< Alternative > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< Alternative > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_Alternative_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_AlternativeList_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  Alternative *arg1 = 0 ;
  int arg2 ;
  std::vector< Alternative > *result = 0 ;
  
  arg1 = (Alternative *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Alternative const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< Alternative > *)std_vector_Sl_Alternative_Sg__Repeat((Alternative const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_AlternativeList_Reverse__SWIG_0(void * jarg1) {
  std::vector< Alternative > *arg1 = (std::vector< Alternative > *) 0 ;
  
  arg1 = (std::vector< Alternative > *)jarg1; 
  std_vector_Sl_Alternative_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_AlternativeList_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< Alternative > *arg1 = (std::vector< Alternative > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< Alternative > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_Alternative_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_AlternativeList_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Alternative > *arg1 = (std::vector< Alternative > *) 0 ;
  int arg2 ;
  std::vector< Alternative > *arg3 = 0 ;
  
  arg1 = (std::vector< Alternative > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< Alternative > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Alternative > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Alternative_Sg__SetRange(arg1,arg2,(std::vector< Alternative > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_delete_AlternativeList(void * jarg1) {
  std::vector< Alternative > *arg1 = (std::vector< Alternative > *) 0 ;
  
  arg1 = (std::vector< Alternative > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_new_UncertaintyList__SWIG_0() {
  void * jresult ;
  std::vector< Uncertainty > *result = 0 ;
  
  result = (std::vector< Uncertainty > *)new std::vector< Uncertainty >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_new_UncertaintyList__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< Uncertainty > *arg1 = 0 ;
  std::vector< Uncertainty > *result = 0 ;
  
  arg1 = (std::vector< Uncertainty > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Uncertainty > const & is null", 0);
    return 0;
  } 
  result = (std::vector< Uncertainty > *)new std::vector< Uncertainty >((std::vector< Uncertainty > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_UncertaintyList_Clear(void * jarg1) {
  std::vector< Uncertainty > *arg1 = (std::vector< Uncertainty > *) 0 ;
  
  arg1 = (std::vector< Uncertainty > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_UncertaintyList_Add(void * jarg1, void * jarg2) {
  std::vector< Uncertainty > *arg1 = (std::vector< Uncertainty > *) 0 ;
  Uncertainty *arg2 = 0 ;
  
  arg1 = (std::vector< Uncertainty > *)jarg1; 
  arg2 = (Uncertainty *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Uncertainty const & is null", 0);
    return ;
  } 
  (arg1)->push_back((Uncertainty const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_UncertaintyList_size(void * jarg1) {
  unsigned int jresult ;
  std::vector< Uncertainty > *arg1 = (std::vector< Uncertainty > *) 0 ;
  std::vector< Uncertainty >::size_type result;
  
  arg1 = (std::vector< Uncertainty > *)jarg1; 
  result = ((std::vector< Uncertainty > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_UncertaintyList_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< Uncertainty > *arg1 = (std::vector< Uncertainty > *) 0 ;
  bool result;
  
  arg1 = (std::vector< Uncertainty > *)jarg1; 
  result = (bool)((std::vector< Uncertainty > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_UncertaintyList_capacity(void * jarg1) {
  unsigned int jresult ;
  std::vector< Uncertainty > *arg1 = (std::vector< Uncertainty > *) 0 ;
  std::vector< Uncertainty >::size_type result;
  
  arg1 = (std::vector< Uncertainty > *)jarg1; 
  result = ((std::vector< Uncertainty > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_UncertaintyList_reserve(void * jarg1, unsigned int jarg2) {
  std::vector< Uncertainty > *arg1 = (std::vector< Uncertainty > *) 0 ;
  std::vector< Uncertainty >::size_type arg2 ;
  
  arg1 = (std::vector< Uncertainty > *)jarg1; 
  arg2 = (std::vector< Uncertainty >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_new_UncertaintyList__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< Uncertainty > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< Uncertainty > *)new_std_vector_Sl_Uncertainty_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_UncertaintyList_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< Uncertainty > *arg1 = (std::vector< Uncertainty > *) 0 ;
  int arg2 ;
  SwigValueWrapper< Uncertainty > result;
  
  arg1 = (std::vector< Uncertainty > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_Uncertainty_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new Uncertainty(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_UncertaintyList_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< Uncertainty > *arg1 = (std::vector< Uncertainty > *) 0 ;
  int arg2 ;
  std::vector< Uncertainty >::value_type *result = 0 ;
  
  arg1 = (std::vector< Uncertainty > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< Uncertainty >::value_type *) &std_vector_Sl_Uncertainty_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_UncertaintyList_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Uncertainty > *arg1 = (std::vector< Uncertainty > *) 0 ;
  int arg2 ;
  Uncertainty *arg3 = 0 ;
  
  arg1 = (std::vector< Uncertainty > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Uncertainty *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Uncertainty const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Uncertainty_Sg__setitem(arg1,arg2,(Uncertainty const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_UncertaintyList_AddRange(void * jarg1, void * jarg2) {
  std::vector< Uncertainty > *arg1 = (std::vector< Uncertainty > *) 0 ;
  std::vector< Uncertainty > *arg2 = 0 ;
  
  arg1 = (std::vector< Uncertainty > *)jarg1; 
  arg2 = (std::vector< Uncertainty > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Uncertainty > const & is null", 0);
    return ;
  } 
  std_vector_Sl_Uncertainty_Sg__AddRange(arg1,(std::vector< Uncertainty > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_UncertaintyList_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< Uncertainty > *arg1 = (std::vector< Uncertainty > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< Uncertainty > *result = 0 ;
  
  arg1 = (std::vector< Uncertainty > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< Uncertainty > *)std_vector_Sl_Uncertainty_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_UncertaintyList_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Uncertainty > *arg1 = (std::vector< Uncertainty > *) 0 ;
  int arg2 ;
  Uncertainty *arg3 = 0 ;
  
  arg1 = (std::vector< Uncertainty > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Uncertainty *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Uncertainty const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Uncertainty_Sg__Insert(arg1,arg2,(Uncertainty const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_UncertaintyList_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Uncertainty > *arg1 = (std::vector< Uncertainty > *) 0 ;
  int arg2 ;
  std::vector< Uncertainty > *arg3 = 0 ;
  
  arg1 = (std::vector< Uncertainty > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< Uncertainty > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Uncertainty > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Uncertainty_Sg__InsertRange(arg1,arg2,(std::vector< Uncertainty > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_UncertaintyList_RemoveAt(void * jarg1, int jarg2) {
  std::vector< Uncertainty > *arg1 = (std::vector< Uncertainty > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< Uncertainty > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_Uncertainty_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_UncertaintyList_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< Uncertainty > *arg1 = (std::vector< Uncertainty > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< Uncertainty > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_Uncertainty_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_UncertaintyList_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  Uncertainty *arg1 = 0 ;
  int arg2 ;
  std::vector< Uncertainty > *result = 0 ;
  
  arg1 = (Uncertainty *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Uncertainty const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< Uncertainty > *)std_vector_Sl_Uncertainty_Sg__Repeat((Uncertainty const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_UncertaintyList_Reverse__SWIG_0(void * jarg1) {
  std::vector< Uncertainty > *arg1 = (std::vector< Uncertainty > *) 0 ;
  
  arg1 = (std::vector< Uncertainty > *)jarg1; 
  std_vector_Sl_Uncertainty_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_UncertaintyList_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< Uncertainty > *arg1 = (std::vector< Uncertainty > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< Uncertainty > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_Uncertainty_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_UncertaintyList_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Uncertainty > *arg1 = (std::vector< Uncertainty > *) 0 ;
  int arg2 ;
  std::vector< Uncertainty > *arg3 = 0 ;
  
  arg1 = (std::vector< Uncertainty > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< Uncertainty > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Uncertainty > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Uncertainty_Sg__SetRange(arg1,arg2,(std::vector< Uncertainty > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_delete_UncertaintyList(void * jarg1) {
  std::vector< Uncertainty > *arg1 = (std::vector< Uncertainty > *) 0 ;
  
  arg1 = (std::vector< Uncertainty > *)jarg1; 
  delete arg1;
}


SWIGEXPORT Criterion * SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_MaximinCriterion_SWIGUpcast(MaximinCriterion *jarg1) {
    return (Criterion *)jarg1;
}

SWIGEXPORT Criterion * SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_OptimismPessimismCriterion_SWIGUpcast(OptimismPessimismCriterion *jarg1) {
    return (Criterion *)jarg1;
}

SWIGEXPORT Criterion * SWIGSTDCALL CSharp_NaturalUncertaintyCsharpApi_PrincipleOfInsufficientReason_SWIGUpcast(PrincipleOfInsufficientReason *jarg1) {
    return (Criterion *)jarg1;
}

#ifdef __cplusplus
}
#endif

